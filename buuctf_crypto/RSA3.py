'''
共模攻击
m = c1^s1 * c2^s2 mod n
推导过程：https://blog.csdn.net/MikeCoke/article/details/106065200

同模攻击利用的大前提就是，RSA体系在生成密钥的过程中使用了相同的模数n.
对同一条明文m，进行加密：
A: c1 = m^e1 mod n  ==>  m = c1^d1 mod n
B: c2 = m^e2 mod n  ==>  m = c2^d2 mod n
如果，此时有一个攻击者，同时监听了A和B接收到的密文C1、C2
因为模数n不变，以及所有么钥都是公开的，那么利用同模攻市就可在不知道d1、d2的条件不解密得到 m

推导过程：
当n一定，已知e1,e2,c1,c2，假设e1、e2互质，即 gcd(e1,e2)=1
==> e1*s1 + e2*s2 = 1, s1和s2一正一负
通过欧几里德算法，我们可以得到上式的一组解（s1，s2)，假设s1为正数，s2为负数
由 c1 = m^e1 mod n、c2 = m^e2 mod n
==> (c1^s1 * c2^s2) mod n
==> ((m^e1 mod n)^s1 * (m^e2 mod n)^s2) mod n
==> ((m^e1*s1 mod n) * (m^e2*s2 mod n)) mod n
==> ((m^e1*s1+e2*s2) mod n) mod n
联合 e1*s1 + e2*s2 = 1
==> (c1^s1 * c2^s2) mod n = (m mod n) mod n
==> (c1^s1 * c2^s2) = m mod n
==> m = (c1^s1 * c2^s2) mod n
'''

import gmpy2

c1 = 22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361
n = 22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801
e1 = 11187289
c2 = 18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397
e2 = 9647291

_, s1, s2 = gmpy2.gcdext(e1, e2)

# m = c1^s1 * c2^s2 mod n
m = (gmpy2.powmod(c1, s1, n) * gmpy2.powmod(c2, s2, n)) % n
print(bytes.fromhex(hex(m)[2:]))
