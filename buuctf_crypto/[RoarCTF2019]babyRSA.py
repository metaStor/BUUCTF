import gmpy2
import sympy
import random
from Crypto.Util.number import long_to_bytes

'''
def myGetPrime():
    A= getPrime(513)
    print(A)
    B=A-random.randint(1e3,1e5)
    print(B)
    return sympy.nextPrime((B!)%A)
p=myGetPrime()
#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407
#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596

q=myGetPrime()
#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927
#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026

r=myGetPrime()

n=p*q*r
#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733
c=pow(flag,e,n)
#e=0x1001
#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428
#so,what is the flag?
'''

# 由威尔逊定理有: (p-1)!≡-1(mod p)
'''
由wilson定理套入原题中可得：
(A-1)! ≡ -1(mod A)
由于B = A-random.randint(1e3,1e5), 所以A>B
==> (A-1)! = (A-1)*(A-2)*...*(B+1)*(B!), 
==> (A-1)*(A-2)*...*(B+1)*(B!) = -1(mod A)
==> (A-1)*(A-2)*...*(B+1)*(B!) = (A-1)(mod A)  # 一个负数: −x 可以等价转换为 “模数减去x”（前提是 x<A）
==> (A-2)*...*(B+1)*(B!) = 1 (mod A), 设k=(A-2)*(A-3)*...*(B+1)
==> k*(B!) ≡ 1 (mod A) 
由k模A的逆元求得(B!)的值: gmpy2.invert(k, A)
再nextPrime((B!)%A)得到myGetPrime()返回的值
'''
def wilson(A, B):
    k = 1
    for i in range(B + 1, A - 1):
        k *= i
        k %= A
    B_1 = gmpy2.invert(k, A)
    return sympy.nextprime(B_1 % A)


A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407
B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596
A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927
B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026
n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733
e=0x1001
c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428

p = wilson(A1, B1)
q = wilson(A2, B2)
r = n // p // q
print(f"get p,q,r\np={p}\nq={q}\nr={r}")
phi = (p - 1) * (q - 1) * (r - 1)
e = int(e)
d = gmpy2.invert(e, phi)
m = gmpy2.powmod(c, d, n)
print(long_to_bytes(m))